# This file is part of the Rumudge gem
# Copyright (C) 2014 Alex Gladd
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

##
## base abstract controller
##

class Rumudge::Controller
  TAG = 'BaseController'

  # include Rumudge::ControllerCallbacks

  attr_reader :next_ctrl

  def initialize
    # unless session.is_a? Rumudge::Session
    #   raise ArgumentError, 'Argument must be a Rumudge::Session object'
    # end

    # @session = session

    @cb_on_start = []
    @cb_before_cmd = []
    @cb_after_cmd = []
    @cb_on_stop = []

    @command = nil
    @params = nil

    @response = nil

    @finished = false
    @next_ctrl = nil

    # callbacks on start
    run_callbacks @cb_on_start
  end

  # start a round of processing in the controller
  # returns the response generated by the controller
  def action(input = nil)
    Log.d(TAG, "#{self} Beginning action with input=#{input.to_s}")

    # clear response
    @response = nil

    # parse the input
    parse_input input

    # callbacks before command
    run_callbacks @cb_before_cmd

    # do the command
    process_command

    # callbacks after the command
    run_callbacks @cb_after_cmd

    Log.d(TAG, "#{self} Finished action with response='#{@response}'")
    @response
  end

  # process the command and set the response (subclasses should override)
  def process_command
  end

  def finished?
    @finished
  end

  # set callbacks for controller startup
  def before_start(*callbacks)
    @cb_on_start.replace(callbacks) unless callbacks.nil?
  end

  # set callbacks for before processing command
  def before_command(*callbacks)
    @cb_before_cmd.replace(callbacks) unless callbacks.nil?
  end

  # set callbacks for after command processing (before response to client)
  def after_command(*callbacks)
    @cb_after_cmd.replace(callbacks) unless callbacks.nil?
  end

  # set callbacks for controller shutdown
  def before_stop(*callbacks)
    @cb_on_stop.replace(callbacks) unless callbacks.nil?
  end

  private

  def command
    @command
  end

  def params
    @params
  end

  def response=(resp = nil)
    @response = resp
  end

  # signal that this controller should be terminated
  def finish(next_ctrl = nil)
    unless next_ctrl.ia_a? Class
      raise ArgumentError, 'Argument must be a Rumudge::Controller class'
    end

    @finished = true
    @next_ctrl = next_ctrl

    # callbacks on stop
    run_callbacks @cb_on_stop
  end

  def parse_input(input)
    if input.nil? || input.empty?
      @command = nil
      @params = nil
    else
      parts = input.split(' ')
      @command = parts.shift
      @params = parts
    end
  end

  def run_callbacks(cb_list = [])
    # call each callback if it exists
    cb_list.each do |cb|
      if self.respond_to? cb
        self.send cb
      end
    end
  end
end
